{"version":3,"sources":["dataProvider/graphql.js"],"names":["customBuildQuery","introspectionResults","buildQuery","buildQueryFactory","type","resource","params","DELETE","query","gql","variables","id","parseResponse","data","Error","buildApolloClient","clientOptions","uri","introspection","operationNames","name","then","dataProvider","getGqlResource"],"mappings":"+TAKA,IAyBMA,EAAmB,SAAAC,GACrB,IAAMC,EAAaC,YAAkBF,GAErC,OAAO,SAACG,EAAMC,EAAUC,GACpB,OAAIF,IAASG,IACF,CACHC,MAAOC,IAAF,IAAuBJ,EAChBA,GAEZK,UAAW,CAAEC,GAAIL,EAAOK,IACxBC,cAAe,YACX,GADyB,EAAXC,KACL,SAAD,OAAUR,IACd,MAAO,CAAEQ,KAAM,CAAEF,GAAIL,EAAOK,KAGhC,MAAM,IAAIG,MAAJ,2BAA8BT,MAKzCH,EAAWE,EAAMC,EAAUC,KAI3B,qBACX,OAAOS,YAAkB,CACrBC,cAAe,CACXC,IAAK,iCAETC,cAAe,CACXC,eAAe,eACVZ,KAAS,SAAAF,GAAQ,sBAAaA,EAASe,UAGhDlB,WAAYF,IACbqB,MAAK,SAAAC,GAAY,OAAI,SAAClB,EAAMC,EAAUC,GAAjB,OACpBgB,EAAalB,EA7DE,SAAAC,GACnB,OAAQA,GACJ,IAAK,YACD,MAAO,WAEX,IAAK,aACD,MAAO,WAEX,IAAK,WACD,MAAO,UAEX,IAAK,WACD,MAAO,UAEX,IAAK,UACD,MAAO,SAEX,IAAK,WACD,MAAO,UAEX,QACI,MAAM,IAAIS,MAAJ,2BAA8BT,KAwCrBkB,CAAelB,GAAWC","file":"static/js/6.d24824cb.chunk.js","sourcesContent":["import buildApolloClient, {\n    buildQuery as buildQueryFactory,\n} from 'ra-data-graphql-simple';\nimport { DELETE } from 'ra-core';\nimport gql from 'graphql-tag';\nconst getGqlResource = resource => {\n    switch (resource) {\n        case 'customers':\n            return 'Customer';\n\n        case 'categories':\n            return 'Category';\n\n        case 'commands':\n            return 'Command';\n\n        case 'products':\n            return 'Product';\n\n        case 'reviews':\n            return 'Review';\n\n        case 'invoices':\n            return 'Invoice';\n\n        default:\n            throw new Error(`Unknown resource ${resource}`);\n    }\n};\n\nconst customBuildQuery = introspectionResults => {\n    const buildQuery = buildQueryFactory(introspectionResults);\n\n    return (type, resource, params) => {\n        if (type === DELETE) {\n            return {\n                query: gql`mutation remove${resource}($id: ID!) {\n                    remove${resource}(id: $id)\n                }`,\n                variables: { id: params.id },\n                parseResponse: ({ data }) => {\n                    if (data[`remove${resource}`]) {\n                        return { data: { id: params.id } };\n                    }\n\n                    throw new Error(`Could not delete ${resource}`);\n                },\n            };\n        }\n\n        return buildQuery(type, resource, params);\n    };\n};\n\nexport default () => {\n    return buildApolloClient({\n        clientOptions: {\n            uri: 'http://localhost:4000/graphql',\n        },\n        introspection: {\n            operationNames: {\n                [DELETE]: resource => `remove${resource.name}`,\n            },\n        },\n        buildQuery: customBuildQuery,\n    }).then(dataProvider => (type, resource, params) =>\n        dataProvider(type, getGqlResource(resource), params)\n    );\n};\n"],"sourceRoot":""}